(let
  (cons 
    (\ (a b) 
      (\ (x) 
        (cond 
          (x a)
          (1 b)
        )
      )
    )
  )
  (car 
    (\ (a)
      (a 1)
    )
  )
  (cdr
    (\ (a)
      (a 0)
    )
  )
  (map 
    (\ (l f)
      (cons (f (car l)) (map (cdr l) f))
    )
  )
   
  (BinTree (\ (key val l r)
    (\ (k)
      (cond 
        ((= k 'key) key)
        ((= k 'val) val)
        ((= k 'left) l)
        ((= k 'right) r)
      )
    )
  ))
  (BinTreeSample (BinTree 'null 'null BinTreeSample BinTreeSample))
  (BinTreeGet (\ (key b)
    (cond
      ((= (b 'key) 'null) 'null)
      ((= (b 'key) key) (b 'val))
      ((< (b 'key) key) (BinTreeGet key (b 'right)))
      ((> (b 'key) key) (BinTreeGet key (b 'left )))
    )
  ))
  (BinTreeSet (\ (key val b)
    (cond 
      ((= 'null (b 'key)) (BinTree key val BinTreeSample BinTreeSample))
      ((= (b 'key) key) (BinTree key val (b 'left) (b 'right)))
      ((< (b 'key) key) (BinTree (b 'key) (b 'val) (b 'left) (BinTreeSet key val (b 'right ))))
      ((> (b 'key) key) (BinTree (b 'key) (b 'val) (BinTreeSet key val (b 'left )) (b 'right)))
    )
  ))
)
